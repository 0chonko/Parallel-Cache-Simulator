READ
	P1 requests data at 0000
	
	C1 miss read 
		- send bus mem request from memory
		- waits 100ns for the result
		- evicts if anything to evict
		- sends data to CPU
	
	C1 hit read 
		- check for validity 
		- if invalid retrieve memory 
		- set to valid 
		- send to CPU

WRITE
	P1 writes data at 0000
	
	C1 miss write 
		- send bus mem request from memory
		- waits 100ns for the result
		- evicts if anything to evict
		- sends data to CPU
		- broadcasts invalidation bit to the bus 

	
	C1 hit write 
		- update value 
		- broadcast invalidation to the bus for 0000
		- write-through to memory (wait to complete)
		- 
		
2
Snooping protocol
State transitions
	Stay invalid 
		- recv NR, NW, PW (issue NW)
	Stay valid
		- recv PR, NR, PW (issue NW)
	Go  invalid
		- recv NW
	Go valid
		- Recv PR (issue NR)
		

############
Assignment 3

This cache hits or misses:
    read/write miss 
        -> pull memory or another cache_request
    read miss 
        -> if available in another cache get it and set to SHARED 
        -> otherwise get from memory and set EXCLUSIVE
        -> INVALID to EXCLUSIVE or to SHARED (if other present)


    write miss 
        -> get from other cache or memory and set to MODIFIED
        -> if INVALID write back and to MODIFIED

    read hit
        -> stay same State

    write hit 
        -> from EXCLUSIVE set to MODIFIED and invalidate other copies
        -> MODIFIED stays
        -> from SHARED to MODIFIED
        -> from OWNED to MODIFIED


IN (incoming snoop and has_cacheLine is true):

    read hit 
        -> from MODIFIED to OWNED
        -> from SHARED stay SHARED
        -> from EXCLUSIVE to SHARED
        -> stay in OWNED
    write hit
        -> from EXCLUSIVE to INVALID
        -> from MODIFIED to INVALID
        -> from SHARED to INVALID
        -> from OWNED to INVALID

Caches holding registers of copies of values in other caches?



MODIFIED and OWNED state, when evicted, should be written back to memory
